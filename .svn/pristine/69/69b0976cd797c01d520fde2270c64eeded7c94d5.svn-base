using OM.Lib.Base.Enums;
using OM.Lib.Base.Utils;
using OM.Lib.Entity;
using OM.Lib.Framework.Db;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace OM.Atman.Chakra.App
{
    public partial class StrategyTradeRuleForm : Form
    {
        StrategyTradeRule rule = new StrategyTradeRule();
        public StrategyTradeRuleForm()
        {
            InitializeComponent();
            this.Load += TradeRuleForm_Load;
            SiseEvents.Instance.SiseHandler += Instance_SiseHandler;
            TradeEvents.Instance.TradeRuleHandler2 += Instance_TradeRuleHandler;
        }

        private void TradeRuleForm_Load(object sender, EventArgs e)
        {
            rule.Item = tbItem.Text;
            cbBasePattern.SelectedIndex = (int)rule.BasePattern;          
            cbPriceType.SelectedIndex = Convert.ToInt32(rule.PriceType);
        }

        private void Instance_TradeRuleHandler(string atmanName, string ruleID, string itemCode, string message)
        {
            if (atmanName != "TRADE") return;
            if (itemCode != tbItem.Text) return;

            tbLog.Invoke(new MethodInvoker(() =>
               {
                   tbLog.AppendText(itemCode + "=>" + message);
                   tbLog.AppendText(Environment.NewLine);
               }));
        }
        private void Instance_SiseHandler(string itemCode, CurrentPrice price)
        {
            try
            {
                if (rule.Item != itemCode) return;
                if (!rule.IsUse) return;
                rule.Analysis(price);
            }
            catch (Exception ex)
            {
                tbLog.Invoke(new MethodInvoker(() =>
                {
                    tbLog.AppendText(itemCode + "=>" + ex.Message);
                    tbLog.AppendText(Environment.NewLine);
                }));
            }
        }

        private void tbItem_TextChanged(object sender, EventArgs e)
        {
            if (tbItem.Text.Length == 0) return;
            rule.Item = tbItem.Text;
        }
        private void rdoSType1_CheckedChanged(object sender, EventArgs e)
        {

        }
        private void rdoSType2_CheckedChanged(object sender, EventArgs e)
        {

        }
        private void rdoSType3_CheckedChanged(object sender, EventArgs e)
        {

        }
        private void cbPriceType_SelectedIndexChanged(object sender, EventArgs e)
        {
            rule.PriceType = cbPriceType.SelectedIndex.ToString();
        }
        private void cbTimeType_SelectedIndexChanged(object sender, EventArgs e)
        {
            rule.TimeType = cbTimeType.SelectedItem.ToString();
        }
        private void chkIsUse_CheckedChanged(object sender, EventArgs e)
        {
            rule.IsUse = chkIsUse.Checked;
        }
        private void tbBasePrice_TextChanged(object sender, EventArgs e)
        {
            if (tbBasePrice.Text.Length == 0) return;
            rule.BasePrice = Convert.ToDouble(tbBasePrice.Text);
        }
        private void cbBasePattern_SelectedIndexChanged(object sender, EventArgs e)
        {
            rule.BasePattern = (PricePatternEnum)cbBasePattern.SelectedIndex;
        }
        private void rdoPosition1_CheckedChanged(object sender, EventArgs e)
        {
            if (rdoPosition1.Checked) rule.Position = "1";
        }
        private void rdoPosition2_CheckedChanged(object sender, EventArgs e)
        {
            if (rdoPosition2.Checked) rule.Position = "2";
        }
        private void tbQty_TextChanged(object sender, EventArgs e)
        {
            if (tbQty.Text.Length == 0) return;
            rule.Quantity = Convert.ToInt32(tbQty.Text);
        }
        private void tbBuyPrice1_TextChanged(object sender, EventArgs e)
        {
            if (tbBuyPrice1.Text.Length == 0) return;
            rule.BuyPrice1 = Convert.ToDouble(tbBuyPrice1.Text);
        }
        private void tbBuyPrice2_TextChanged(object sender, EventArgs e)
        {
            if (tbBuyPrice2.Text.Length == 0) return;
            rule.BuyPrice2 = Convert.ToDouble(tbBuyPrice2.Text);
        }
        private void tbBuyPrice_TextChanged(object sender, EventArgs e)
        {
            if (tbBuyPrice.Text.Length == 0) return;
            rule.BuyPrice = Convert.ToDouble(tbBuyPrice.Text);
        }
        private void chkIsUseBuy_CheckedChanged(object sender, EventArgs e)
        {
            rule.IsUseBuy = chkIsUseBuy.Checked;
        }
        private void tbLosscutPrice_TextChanged(object sender, EventArgs e)
        {
            if (tbLosscutPrice.Text.Length == 0) return;
            rule.LosscutPrice = Convert.ToDouble(tbLosscutPrice.Text);
        }
        private void tbRevenuePrice_TextChanged(object sender, EventArgs e)
        {
            if (tbRevenuePrice.Text.Length == 0) return;
            rule.RevenuePrice = Convert.ToDouble(tbRevenuePrice.Text);
        }
        private void chkIsUseLosscut_CheckedChanged(object sender, EventArgs e)
        {
            rule.IsUseLosscut = chkIsUseLosscut.Checked;
        }
        private void chkIsUseRevenue_CheckedChanged(object sender, EventArgs e)
        {
            rule.IsUseRevenue = chkIsUseRevenue.Checked;
        }

        private void btnStartStop_Click(object sender, EventArgs e)
        {

        }
    }
}
