using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace OM.PP.Chakra
{
    /// <summary>
    /// 
    /// </summary>
    public class T_QuantumItemData : A_HLOC, ITransform
    {
        private S_CandleItemData source1Data = null;
        private S_CandleItemData source2Data = null;
        private List<S_CandleItemData> sourceDataArray = null;
        
        /// <summary>
        /// 당일 가격만 가지고 퀀텀데이터 만든다.
        /// </summary>
        /// <param name="sourceData"></param>
        public T_QuantumItemData(S_CandleItemData sourceData)
        {
            this.source1Data = sourceData;
            this.source2Data = null;
            this.sourceDataArray = null;
        }
        /// <summary>
        /// 전일가격 및 당일가격으로 퀀텀데이터 만든다.
        /// </summary>
        /// <param name="sourceBData"></param>
        /// <param name="sourceCData"></param>
        public T_QuantumItemData(S_CandleItemData sourceBData, S_CandleItemData sourceCData)
        {
            this.source1Data = sourceBData;
            this.source2Data = sourceCData;
            this.sourceDataArray = null;
        }
        /// <summary>
        /// 최근 시고저종을 찾고, 거기에서 퀀텀을 만든다.
        /// </summary>
        /// <param name="sourceDataArray"></param>
        public T_QuantumItemData(List<S_CandleItemData> sourceDataArray)
        {
            this.source1Data = null;
            this.source2Data = null;
            this.sourceDataArray = sourceDataArray;
        }

        public Single t_open = 0;
        public Single t_high = 0;
        public Single t_low = 0;
        public Single t_close = 0;
        public Single T_OpenPrice { get { return t_open; } }
        public Single T_HighPrice { get { return t_high; } }
        public Single T_LowPrice { get { return t_low; } }
        public Single T_ClosePrice { get { return t_close; } }

        public S_CandleItemData Source1Data { get { return source1Data; } }
        public S_CandleItemData Source2Data { get { return source2Data; } }
        public List<S_CandleItemData> SourceDataArray { get { return sourceDataArray; } }

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public void Transform()
        {
            try
            {
                //로직추가        
                if (sourceDataArray != null)
                {
                }
                //source1 = Yesterday     source2 = Today
                else if (source1Data != null && source2Data != null)
                {
                    Single odiff = Math.Abs(source1Data.OpenPrice - source2Data.OpenPrice);
                    Single hdiff = Math.Abs(source1Data.HighPrice - source2Data.HighPrice);
                    Single ldiff = Math.Abs(source1Data.LowPrice - source2Data.LowPrice);
                    Single cdiff = Math.Abs(source1Data.ClosePrice - source2Data.ClosePrice);

                    if (source1Data.OpenPrice < source2Data.OpenPrice) t_open = source1Data.OpenPrice - odiff;
                    else t_open = source1Data.OpenPrice + odiff;

                    if (source1Data.HighPrice < source2Data.HighPrice) t_high = source1Data.HighPrice - hdiff;
                    else t_high = source1Data.HighPrice + hdiff;

                    if (source1Data.LowPrice < source2Data.LowPrice) t_low = source1Data.LowPrice - ldiff;
                    else t_low = source1Data.LowPrice + ldiff;

                    if (source1Data.ClosePrice < source2Data.ClosePrice) t_close = source1Data.ClosePrice - cdiff;
                    else t_close = source1Data.ClosePrice + cdiff;

                    OpenPrice = source2Data.OpenPrice;
                    HighPrice = source2Data.HighPrice;
                    LowPrice = source2Data.LowPrice;
                    ClosePrice = source2Data.ClosePrice;
                    DTime = source1Data.DTime;
                }
                else if (source1Data != null && source2Data == null)
                {
                    Single hdiff = Math.Abs(source1Data.OpenPrice - source1Data.HighPrice);
                    Single ldiff = Math.Abs(source1Data.OpenPrice - source1Data.LowPrice);
                    Single cdiff = Math.Abs(source1Data.OpenPrice - source1Data.ClosePrice);

                    t_open = source1Data.OpenPrice;
                    t_low = source1Data.OpenPrice - hdiff;
                    t_high = source1Data.OpenPrice + ldiff;
                    if (source1Data.OpenPrice < source1Data.ClosePrice) t_close = source1Data.OpenPrice - cdiff;
                    else t_close = source1Data.OpenPrice + cdiff;

                    OpenPrice = source2Data.OpenPrice;
                    HighPrice = source2Data.HighPrice;
                    LowPrice = source2Data.LowPrice;
                    ClosePrice = source2Data.ClosePrice;
                    DTime = source1Data.DTime;
                }               
            }
            catch (Exception ex)
            {
            }
        }
    }
}
