using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace OM.Vikala.Chakra.App.Mains
{
    public partial class MainForm : Form
    {
        List<Form> formList = new List<Form>();

        public TabControl MdiTabControl
        {
            get
            {
                return this.tabPage;
            }
        }

        public MainForm()
        {
            InitializeComponent();
        }

        public void AddTab(BaseForm bmf)
        {
            bmf.WindowState = FormWindowState.Maximized;
            bmf.MdiParent = this;
            bmf.MdiForm = this;

            TabPage tp = new TabPage(bmf.Text);
            tp.Controls.Add(bmf);
            tabPage.TabPages.Add(tp);
            bmf.Show();
            formList.Add(bmf);
        }
        public void RemoveTab(BaseForm bmf)
        {
            TabPage sP = null;
            foreach (TabPage p in tabPage.TabPages)
            {
                if (p.Controls.Count > 0)
                {
                    if (p.Controls[0] == bmf)
                    {
                        sP = p;
                        break;
                    }
                }
            }
            if (sP != null)
                tabPage.TabPages.Remove(sP);

            formList.Remove(bmf);
        }
        private void tsbMC1_Click(object sender, EventArgs e)
        {
            BasicMainForm bmf = new BasicMainForm();
            AddTab(bmf);
        }
      
        private void tabPage_DrawItem(object sender, DrawItemEventArgs e)
        {            
            try
            {
                Rectangle r = e.Bounds;
                r = tabPage.GetTabRect(e.Index);
                r.Offset(2, 2);
                Brush TitleBrush = new SolidBrush(Color.Black);
                Font f = this.Font;
                string title = tabPage.TabPages[e.Index].Text;

                e.Graphics.DrawString(title, f, TitleBrush, new PointF(r.X, r.Y + 2));

                e.Graphics.DrawString("X", f, TitleBrush, new Point(r.X + (tabPage.GetTabRect(e.Index).Width - 16), 7));                
            }
            catch (Exception) { }
        }

        private void tabPage_MouseClick(object sender, MouseEventArgs e)
        {
            TabControl tc = (TabControl)sender;
            Point p = e.Location;
            int _tabWidth = 0;
            _tabWidth = tabPage.GetTabRect(tc.SelectedIndex).Width - 16;
            Rectangle r = tabPage.GetTabRect(tc.SelectedIndex);
            r.Offset(_tabWidth, 7);
            r.Width = 16;
            r.Height = 16;
            if (r.Contains(p))
            {
                TabPage TabP = (TabPage)tc.TabPages[tc.SelectedIndex];
                tc.TabPages.Remove(TabP);

                if(TabP.Controls.Count > 0)
                    RemoveTab((BaseForm)TabP.Controls[0]);
            }
        }

        private void MainForm_SizeChanged(object sender, EventArgs e)
        {
            foreach (var f in formList)
            {
                f.WindowState = FormWindowState.Normal;
                f.WindowState = FormWindowState.Maximized;
            }
        }

        private void tabPage_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (tabPage.SelectedIndex < 0) return;
            if (tabPage.SelectedTab == null) return;

            if (tabPage.SelectedTab.Controls.Count > 0)
            {
                Form f = (Form)tabPage.SelectedTab.Controls[0];

                f.WindowState = FormWindowState.Normal;
                f.WindowState = FormWindowState.Maximized;
            }
        }
    }
}
