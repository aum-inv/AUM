using OM.Lib.Base.Data;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace OM.PP.Chakra
{
    /// <summary>
    /// 
    /// </summary>
    public class T_QuantumItemData : ITransformedData
    {
        private ISourceData source1Data = null;
        private ISourceData source2Data = null;
        private List<ISourceData> sourceDataArray = null;
        
        /// <summary>
        /// 당일 가격만 가지고 퀀텀데이터 만든다.
        /// </summary>
        /// <param name="sourceData"></param>
        public T_QuantumItemData(S_CandleItemData sourceData)
        {
            this.source1Data = sourceData;
            this.source2Data = null;
            this.sourceDataArray = null;
        }
        /// <summary>
        /// 전일가격 및 당일가격으로 퀀텀데이터 만든다.
        /// </summary>
        /// <param name="sourceBData"></param>
        /// <param name="sourceCData"></param>
        public T_QuantumItemData(S_CandleItemData sourceBData, S_CandleItemData sourceCData)
        {
            this.source1Data = sourceBData;
            this.source2Data = sourceCData;
            this.sourceDataArray = null;
        }
        /// <summary>
        /// 최근 시고저종을 찾고, 거기에서 퀀텀을 만든다.
        /// </summary>
        /// <param name="sourceDataArray"></param>
        public T_QuantumItemData(List<ISourceData> sourceDataArray)
        {
            this.source1Data = null;
            this.source2Data = null;
            this.sourceDataArray = sourceDataArray;
        }

        public Single open = 0;
        public Single high = 0;
        public Single low = 0;
        public Single close = 0;
        public Single volume = 0;
        public DateTime dt;

        public Single OpenPrice { get { return open; }  }
        public Single HighPrice { get { return high; } }
        public Single LowPrice { get { return low; } }
        public Single ClosePrice { get { return close; } }
        public Single Volume { get { return volume; } }
        public DateTime DTime { get { return dt; } }
       
        public ISourceData Source1Data { get { return source1Data; } }
        public ISourceData Source2Data { get { return source2Data; } }
        public List<ISourceData> SourceDataArray { get { return sourceDataArray; } }

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public void Transform()
        {
            try
            {
                //로직추가        
                if (sourceDataArray != null)
                {
                }
                //source1 = Yesterday     source2 = Today
                else if (source1Data != null && source2Data != null)
                {
                    Single odiff = Math.Abs(source1Data.OpenPrice - source2Data.OpenPrice);
                    Single hdiff = Math.Abs(source1Data.HighPrice - source2Data.HighPrice);
                    Single ldiff = Math.Abs(source1Data.LowPrice - source2Data.LowPrice);
                    Single cdiff = Math.Abs(source1Data.ClosePrice - source2Data.ClosePrice);

                    if (source1Data.OpenPrice < source2Data.OpenPrice) open = source1Data.OpenPrice - odiff;
                    else open = source1Data.OpenPrice + odiff;

                    if (source1Data.HighPrice < source2Data.HighPrice) high = source1Data.HighPrice - hdiff;
                    else high = source1Data.HighPrice + hdiff;

                    if (source1Data.LowPrice < source2Data.LowPrice) low = source1Data.LowPrice - ldiff;
                    else low = source1Data.LowPrice + ldiff;

                    if (source1Data.ClosePrice < source2Data.ClosePrice) close = source1Data.ClosePrice - cdiff;
                    else close = source1Data.ClosePrice + cdiff;
                    
                    if (low > open) low = open;
                    if (low > close) low = close;
                    if (high < open) high = open;
                    if (high < close) high = close;

                    dt = source1Data.DTime;
                }
                else if (source1Data != null && source2Data == null)
                {
                    Single hdiff = Math.Abs(source1Data.OpenPrice - source1Data.HighPrice);
                    Single ldiff = Math.Abs(source1Data.OpenPrice - source1Data.LowPrice);
                    Single cdiff = Math.Abs(source1Data.OpenPrice - source1Data.ClosePrice);

                    open = source1Data.OpenPrice;
                    low = source1Data.OpenPrice - hdiff;
                    high = source1Data.OpenPrice + ldiff;
                    dt = source1Data.DTime;

                    if (source1Data.OpenPrice < source1Data.ClosePrice) close = source1Data.OpenPrice - cdiff;
                    else close = source1Data.OpenPrice + cdiff;

                    if (low > close) low = close;                        
                    if (high < close) high = close;
                }               
            }
            catch (Exception ex)
            {
            }
        }

        //자체속성
        #region 자체속성
       
        #endregion
    }
}
