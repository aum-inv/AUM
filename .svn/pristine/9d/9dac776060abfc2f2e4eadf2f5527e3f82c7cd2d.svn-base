using OM.Lib.Base.Utils;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace OM.PP.Chakra
{
    public abstract class A_HLOC
    {
        public string ItemCode
        {
            get;
            set;
        } = "";

        public int RoundLength
        {
            get
            {
                return ItemCodeUtil.GetItemCodeRoundNum(ItemCode);
            }
        }

        private Single _OpenPrice = 0;
        private Single _HighPrice = 0;
        private Single _LowPrice  = 0;
        private Single _ClosePrice = 0;

        public Single OpenPrice { get { return (Single)Math.Round(_OpenPrice, RoundLength); } set { _OpenPrice = value; } }
        public Single HighPrice { get { return (Single)Math.Round(_HighPrice, RoundLength); ; } set { _HighPrice = value; } }
        public Single LowPrice { get { return (Single)Math.Round(_LowPrice, RoundLength); ; } set { _LowPrice = value; } }
        public Single ClosePrice { get { return (Single)Math.Round(_ClosePrice, RoundLength); ; } set { _ClosePrice = value; } }

        public Single Volume { get; set; } = 0;
         
        public Single CenterPrice
        {
            get
            {
                return (Single)Math.Round((HighPrice + LowPrice) / 2.0f, RoundLength);
            }
        }

        public Single HCenterPrice
        {
            get
            {
                return (Single)Math.Round((HighPrice + CenterPrice) / 2.0f, RoundLength);
            }
        }

        public Single LCenterPrice
        {
            get
            {
                return (Single)Math.Round((CenterPrice + LowPrice) / 2.0f, RoundLength);
            }
        }

        public Single MiddlePrice
        {
            get
            {
                return (Single)Math.Round((OpenPrice + ClosePrice) / 2.0f, RoundLength);
            }
        }

        public Single QuantumPrice
        {
            get
            {
                if (PlusMinusType == PlusMinusTypeEnum.양)
                {
                    return (Single)Math.Round(OpenPrice - Math.Abs(OpenPrice - ClosePrice), RoundLength);
                }
                else if (PlusMinusType == PlusMinusTypeEnum.음)
                {
                    return (Single)Math.Round(OpenPrice + Math.Abs(OpenPrice - ClosePrice), RoundLength);
                }
                else
                    return (Single)Math.Round(OpenPrice, RoundLength);
            }
        }        
        public Single QuantumLowPrice
        {
            get
            {
                return (Single)Math.Round(OpenPrice - Math.Abs(OpenPrice - HighPrice), RoundLength);
            }
        }
        public Single QuantumHighPrice
        {
            get
            {
                return (Single)Math.Round(OpenPrice + Math.Abs(OpenPrice - LowPrice), RoundLength);
            }
        }        
        public Single QuantumCenterPrice
        {
            get
            {
                return (Single)Math.Round((QuantumHighPrice + QuantumLowPrice) / 2.0f, RoundLength);
            }
        }            
        public Single QuantumMiddlePrice
        {
            get
            {
                return (Single)Math.Round((OpenPrice + QuantumPrice) / 2.0f, RoundLength);
            }
        }

        public Single VikalaPrice
        {
            get
            {
                if (PlusMinusType == PlusMinusTypeEnum.양)
                {
                    return (Single)Math.Round(ClosePrice + Math.Abs(OpenPrice - ClosePrice), RoundLength);
                }
                else if (PlusMinusType == PlusMinusTypeEnum.음)
                {
                    return (Single)Math.Round(ClosePrice - Math.Abs(OpenPrice - ClosePrice), RoundLength);
                }
                else
                    return (Single)Math.Round(OpenPrice, RoundLength);
            }
        }
        public Single VikalaLowPrice
        {
            get
            {
                return (Single)Math.Round(ClosePrice - Math.Abs(ClosePrice - HighPrice), RoundLength);
            }
        }
        public Single VikalaHighPrice
        {
            get
            {
                return (Single)Math.Round(ClosePrice + Math.Abs(ClosePrice - LowPrice), RoundLength);
            }
        }
        public Single VikalaCenterPrice
        {
            get
            {
                return (Single)Math.Round((VikalaHighPrice + VikalaLowPrice) / 2.0f, RoundLength);
            }
        }
        public Single VikalaMiddlePrice
        {
            get
            {
                return (Single)Math.Round((ClosePrice + VikalaPrice) / 2.0f, RoundLength);
            }
        }

        public Single MassPrice
        {
            get
            {
                List<double> list = new List<double>();

                list.Add(OpenPrice);
                list.Add(PriceTick.GetUpPriceOfTick(ItemCode, OpenPrice, 1));
                list.Add(PriceTick.GetUpPriceOfTick(ItemCode, OpenPrice, 2));
                list.Add(PriceTick.GetDownPriceOfTick(ItemCode, OpenPrice, 1));
                list.Add(PriceTick.GetDownPriceOfTick(ItemCode, OpenPrice, 2));

                list.Add(HighPrice);
                list.Add(PriceTick.GetUpPriceOfTick(ItemCode, HighPrice, 1));
                list.Add(PriceTick.GetUpPriceOfTick(ItemCode, HighPrice, 2));
                list.Add(PriceTick.GetDownPriceOfTick(ItemCode, HighPrice, 1));
                list.Add(PriceTick.GetDownPriceOfTick(ItemCode, HighPrice, 2));

                list.Add(LowPrice);
                list.Add(PriceTick.GetUpPriceOfTick(ItemCode, LowPrice, 1));
                list.Add(PriceTick.GetUpPriceOfTick(ItemCode, LowPrice, 2));
                list.Add(PriceTick.GetDownPriceOfTick(ItemCode, LowPrice, 1));
                list.Add(PriceTick.GetDownPriceOfTick(ItemCode, LowPrice, 2));

                list.Add(ClosePrice);
                list.Add(PriceTick.GetUpPriceOfTick(ItemCode, ClosePrice, 1));
                list.Add(PriceTick.GetUpPriceOfTick(ItemCode, ClosePrice, 2));
                list.Add(PriceTick.GetDownPriceOfTick(ItemCode, ClosePrice, 1));
                list.Add(PriceTick.GetDownPriceOfTick(ItemCode, ClosePrice, 2));

                list.Add(QuantumHighPrice);
                list.Add(PriceTick.GetUpPriceOfTick(ItemCode, QuantumHighPrice, 1));
                list.Add(PriceTick.GetUpPriceOfTick(ItemCode, QuantumHighPrice, 2));
                list.Add(PriceTick.GetDownPriceOfTick(ItemCode, QuantumHighPrice, 1));
                list.Add(PriceTick.GetDownPriceOfTick(ItemCode, QuantumHighPrice, 2));

                list.Add(QuantumLowPrice);
                list.Add(PriceTick.GetUpPriceOfTick(ItemCode, QuantumLowPrice, 1));
                list.Add(PriceTick.GetUpPriceOfTick(ItemCode, QuantumLowPrice, 2));
                list.Add(PriceTick.GetDownPriceOfTick(ItemCode, QuantumLowPrice, 1));
                list.Add(PriceTick.GetDownPriceOfTick(ItemCode, QuantumLowPrice, 2));

                list.Add(QuantumPrice);
                list.Add(PriceTick.GetUpPriceOfTick(ItemCode, QuantumPrice, 1));
                list.Add(PriceTick.GetUpPriceOfTick(ItemCode, QuantumPrice, 2));
                list.Add(PriceTick.GetDownPriceOfTick(ItemCode, QuantumPrice, 1));
                list.Add(PriceTick.GetDownPriceOfTick(ItemCode, QuantumPrice, 2));

                list.Add(VikalaPrice);
                list.Add(PriceTick.GetUpPriceOfTick(ItemCode, VikalaPrice, 1));
                list.Add(PriceTick.GetUpPriceOfTick(ItemCode, VikalaPrice, 2));
                list.Add(PriceTick.GetDownPriceOfTick(ItemCode, VikalaPrice, 1));
                list.Add(PriceTick.GetDownPriceOfTick(ItemCode, VikalaPrice, 2));

                list.Add(VikalaHighPrice);
                list.Add(PriceTick.GetUpPriceOfTick(ItemCode, VikalaHighPrice, 1));
                list.Add(PriceTick.GetUpPriceOfTick(ItemCode, VikalaHighPrice, 2));
                list.Add(PriceTick.GetDownPriceOfTick(ItemCode, VikalaHighPrice, 1));
                list.Add(PriceTick.GetDownPriceOfTick(ItemCode, VikalaHighPrice, 2));

                list.Add(VikalaLowPrice);
                list.Add(PriceTick.GetUpPriceOfTick(ItemCode, VikalaLowPrice, 1));
                list.Add(PriceTick.GetUpPriceOfTick(ItemCode, VikalaLowPrice, 2));
                list.Add(PriceTick.GetDownPriceOfTick(ItemCode, VikalaLowPrice, 1));
                list.Add(PriceTick.GetDownPriceOfTick(ItemCode, VikalaLowPrice, 2));

                return (Single)Math.Round(list.Average(), RoundLength);

            }
        }

        public DateTime DTime { get; set; }

        public virtual PlusMinusTypeEnum PlusMinusType
        {
            get
            {
                if (OpenPrice < ClosePrice) return PlusMinusTypeEnum.양;
                else if (OpenPrice > ClosePrice) return PlusMinusTypeEnum.음;
                else return PlusMinusTypeEnum.무;
            }
        }

        public virtual PlusMinusTypeEnum PlusMinusType2
        {
            get
            {
                if (CenterPrice < MiddlePrice) return PlusMinusTypeEnum.양;
                else if (CenterPrice > MiddlePrice) return PlusMinusTypeEnum.음;
                else return PlusMinusTypeEnum.무;
            }
        }

        //public virtual Single GetPlusMass(A_HLOC b)
        //{
        //    //전종 – 현종
        //    //전시 – 현시
        //    //전시 – 고
        //    //현시 - 고
        //    //전종 – 고
        //    //현종 – 고

        //    Single h = b.HighPrice > HighPrice ? b.HighPrice : HighPrice;

        //    Single m1 = Math.Abs(b.ClosePrice - this.ClosePrice);
        //    Single m2 = Math.Abs(b.OpenPrice - this.OpenPrice);
        //    Single m3 = Math.Abs(b.OpenPrice - h);
        //    Single m4 = Math.Abs(this.OpenPrice - h);
        //    Single m5 = Math.Abs(b.ClosePrice - h);
        //    Single m6 = Math.Abs(this.ClosePrice - h);

        //    return (m1 + m2 + m3 + m4 + m5 + m6);
        //}

        //public virtual Single GetMinusMass(A_HLOC b)
        //{
        //    //전종 – 현종
        //    //전시 – 현시
        //    //전시 – 고
        //    //현시 - 고
        //    //전종 – 고
        //    //현종 – 고

        //    Single l = b.LowPrice < LowPrice ? b.LowPrice : LowPrice;

        //    Single m1 = Math.Abs(b.ClosePrice - this.ClosePrice);
        //    Single m2 = Math.Abs(b.OpenPrice - this.OpenPrice);
        //    Single m3 = Math.Abs(b.OpenPrice - l);
        //    Single m4 = Math.Abs(this.OpenPrice - l);
        //    Single m5 = Math.Abs(b.ClosePrice - l);
        //    Single m6 = Math.Abs(this.ClosePrice - l);

        //    return (m1 + m2 + m3 + m4 + m5 + m6);
        //}
    }
}
