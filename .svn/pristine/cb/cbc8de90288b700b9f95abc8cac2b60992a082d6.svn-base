using OM.Lib.Base.Enums;
using OM.Lib.Entity;
using OM.PP.Chakra;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using Tulpep.NotificationWindow;

namespace OM.Atman.Chakra.App
{
    public partial class CandleSignalForm : Form
    {
        TwoLineTradeRule2 twoLineRuleCL = new TwoLineTradeRule2("CL", "0");
        TwoLineTradeRule2 twoLineRuleNG = new TwoLineTradeRule2("NG", "0");
        TwoLineTradeRule2 twoLineRuleGC = new TwoLineTradeRule2("GC", "0");
        TwoLineTradeRule2 twoLineRuleSI = new TwoLineTradeRule2("SI", "0");
        TwoLineTradeRule2 twoLineRuleHSI = new TwoLineTradeRule2("HSI", "0");
        TwoLineTradeRule2 twoLineRuleNQ = new TwoLineTradeRule2("NQ", "0");
        TwoLineTradeRule2 twoLineRuleURO = new TwoLineTradeRule2("URO", "0");
        public CandleSignalForm()
        {
            InitializeComponent();

            PPEvents.Instance.CandleOccurHandler += Instance_CandleOccurHandler;
            PPEvents.Instance.CandleChartPatternHandler += Instance_CandleChartPatternHandler;
            PPEvents.Instance.LineChartPatternHandler += Instance_LineChartPatternHandler;
            this.Load += CandleSignalForm_Load;

            SiseEvents.Instance.SiseHandler += Instance_SiseHandler;
        }

        private void Instance_SiseHandler(string itemCode, CurrentPrice price)
        {
            try
            {
                twoLineRuleCL.Analysis(price);
                twoLineRuleNG.Analysis(price);
                twoLineRuleGC.Analysis(price);
                twoLineRuleSI.Analysis(price);
                twoLineRuleHSI.Analysis(price);
                twoLineRuleNQ.Analysis(price);
                twoLineRuleURO.Analysis(price);
            }
            catch (Exception ex)
            {   
            }
        }
        private void CandleSignalForm_Load(object sender, EventArgs e)
        {
            
        }

        private void Instance_LineChartPatternHandler(string itemCode, TimeIntervalEnum timeInterval, LineChartPatternEnum updown)
        {
            dgv.Rows.Insert(0, "Tick패턴 ", DateTime.Now.ToString("HH:mm:ss"), itemCode, "Tick", updown);

            string title = "Tick패턴 시그널";
            string msg = $"{itemCode}::Tick::{updown}";

            ShowNotifyIcon(title, msg);
        }

        private void Instance_CandleChartPatternHandler(string itemCode, TimeIntervalEnum timeInterval, CandleChartPatternEnum updown)
        {
            dgv.Rows.Insert(0, "캔들패턴 ", DateTime.Now.ToString("HH:mm:ss"), itemCode, EnumUtil.GetTimeIntervalText(timeInterval), updown);

            string title = "캔들패턴 시그널";
            string msg = $"{itemCode}::{EnumUtil.GetTimeIntervalText(timeInterval)}::{updown}";

            ShowNotifyIcon(title, msg);
        }

        private void Instance_CandleOccurHandler(string itemCode, Lib.Base.Enums.TimeIntervalEnum timeInterval, int occurCount)
        {
            dgv.Rows.Insert(0, "캔들갯수",  DateTime.Now.ToString("HH:mm:ss"), itemCode, EnumUtil.GetTimeIntervalText(timeInterval), occurCount);

            string title = "캔들갯수 시그널";
            string msg = $"{itemCode}::{EnumUtil.GetTimeIntervalText(timeInterval)}::{occurCount}";

            ShowNotifyIcon(title, msg);
        }

        private void ShowNotifyIcon(string title, string message)
        {
            //nIcon.BalloonTipIcon = ToolTipIcon.Info;
            //nIcon.BalloonTipTitle = title;
            //nIcon.BalloonTipText= message;
            //nIcon.ShowBalloonTip(5000);

            try
            {
                PopupNotifier popup = new PopupNotifier();
                popup.ShowGrip = true;
                popup.HeaderColor = Color.DarkBlue;
                popup.BodyColor = Color.DarkRed;
                popup.TitleColor = Color.White;
                popup.ContentColor = Color.WhiteSmoke;
                popup.TitleFont = new Font("고딕", 24.0f);
                popup.ContentFont = new Font("굴림", 12.0f);
                popup.TitleText = title;
                popup.ContentText = message;
                popup.Image = global::OM.Atman.Chakra.App.Properties.Resources.signal;
                popup.ImageSize = new Size(50, 40);
                popup.Delay = 1000 * 60;
                popup.Popup();// show  

                var player = new System.Media.SoundPlayer();
                player.Stream = Properties.Resources.money;
                player.Play();
            }
            catch (Exception)
            {
            }
        }
    }
}
