using OM.Lib.Base.Enums;
using OM.Lib.Base.Utils;
using OM.PP.Chakra;
using OM.PP.Chakra.Ctx;
using OM.Vikala.Controls.Charts;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace OM.Vikala.Chakra.App.Mains
{
    public partial class MultiChartForm4 : BaseForm
    {
        List<BaseChartControl> charts = new List<BaseChartControl>();

        BaseChartControl qMin10 = new QuantumLineChart();
        BaseChartControl qMin30 = new QuantumLineChart();
        BaseChartControl qMin60 = new QuantumLineChart();
        BaseChartControl aMin10 = new AtomChart();
        BaseChartControl aMin30 = new AtomChart();
        BaseChartControl aMin60 = new AtomChart();
        public MultiChartForm4()
        {
            InitializeComponent();
            base.setToolStrip(userToolStrip1);
            InitializeControls();
        }

        private void InitializeControls()
        {
            flowDirection = FlowDirectionTypeEnum.TABLE;
            loadChartControls();
            setTimer();
        }

        public override void loadChartControls()
        {
            charts.Clear();

            charts.Add(qMin10);
            charts.Add(aMin10);
            charts.Add(qMin30);
            charts.Add(aMin30);
            charts.Add(qMin60);
            charts.Add(aMin60);

            qMin10.Title = "추세10분";
            qMin30.Title = "추세30분";
            qMin60.Title = "추세60분";
            aMin10.Title = "지지저항10분";
            aMin30.Title = "지지저항30분";
            aMin60.Title = "지지저항60분";

            foreach (var c in charts)
            {
                if (c is QuantumLineChart)
                {
                    c.IsShowXLine = true;
                    c.InitializeControl();
                    c.InitializeEvent(null);
                    c.DisplayPointCount = 60;
                    ((QuantumLineChart)c).IsShowCandle = true;
                }
                else if (c is AtomChart)
                {
                    c.IsAutoScrollX = true;
                    c.IsShowXLine = false;
                    c.InitializeControl();
                    c.InitializeEvent(null);
                    c.DisplayPointCount = 60;
                    ((AtomChart)c).IsShowLine = false;
                    ((AtomChart)c).IsShowCandle = false;
                }
            }
           

            this.flowTable.Dock = DockStyle.Top;
            setFlow();
        }

        public override void setFlow()
        {
            flowTable.Visible = false;          
            flowTable.Controls.Clear();          
            if (flowDirection == FlowDirectionTypeEnum.TABLE)
            {
                flowTable.Controls.Add(charts[0], 0, 0);
                flowTable.Controls.Add(charts[1], 1, 0);
                flowTable.Controls.Add(charts[2], 0, 1);
                flowTable.Controls.Add(charts[3], 1, 1);
                flowTable.Controls.Add(charts[4], 0, 2);
                flowTable.Controls.Add(charts[5], 1, 2);
                flowTable.Height = 300 * 3;
                flowTable.Visible = true;
            }
            foreach (var c in charts)
            {
                c.Height = 290;
                c.Dock = DockStyle.Fill;
                c.BorderStyle = BorderStyle.None;
            }
        }

        public override void loadData()
        {
            if (base.SelectedItemData == null) return;
            if (string.IsNullOrEmpty(base.SelectedItemData.Code)) return;

            string itemCode = base.SelectedItemData.Code;

            var sourceDatas10 = PPContext.Instance.ClientContext.GetCandleSourceDataOrderByAsc(
                   base.SelectedItemData.Code
                 , TimeIntervalEnum.Minute_10);

            var sourceDatas30 = PPContext.Instance.ClientContext.GetCandleSourceDataOrderByAsc(
                  base.SelectedItemData.Code
                , TimeIntervalEnum.Minute_30);
            
            var sourceDatas60 = PPContext.Instance.ClientContext.GetCandleSourceDataOrderByAsc(
                  base.SelectedItemData.Code
                , TimeIntervalEnum.Minute_60);

            if (sourceDatas10 == null || sourceDatas10.Count == 0) return;
            if (sourceDatas30 == null || sourceDatas30.Count == 0) return;
            if (sourceDatas60 == null || sourceDatas60.Count == 0) return;

            qMin10.LoadDataAndApply(itemCode, sourceDatas10, TimeIntervalEnum.Minute_10, 3);
            aMin10.LoadDataAndApply(itemCode, sourceDatas10, TimeIntervalEnum.Minute_10, 3);
            qMin30.LoadDataAndApply(itemCode, sourceDatas30, TimeIntervalEnum.Minute_30, 3);
            aMin30.LoadDataAndApply(itemCode, sourceDatas30, TimeIntervalEnum.Minute_30, 3);
            qMin60.LoadDataAndApply(itemCode, sourceDatas60, TimeIntervalEnum.Minute_60, 3);
            aMin60.LoadDataAndApply(itemCode, sourceDatas60, TimeIntervalEnum.Minute_60, 3);
        }
    }
}
