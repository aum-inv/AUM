using OM.Lib.Base.Enums;
using OM.Lib.Base.Utils;
using OM.Lib.Entity;
using OM.PP.Chakra.Ctx;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace OM.Atman.Chakra
{
    public class StrategyTradeRule : BaseTradeRule
    {
        //"UP↑", "DOWN↓", "UPDOWN↑↓", "DOWNUP↓↑"

        #region 속성

        public string Item { get { return ItemCode; } set { ItemCode = value; } }
        public string StrategyType { get; set; } = "1";     
        public string PriceType { get; set; } = "0";
        public bool IsUse { get; set; } = false;
        public string Position { get; set; } = "2";
        public double BasePrice { get; set; } = 0;
        public PricePatternEnum BasePattern { get; set; } = PricePatternEnum.UPDOWN;
        public bool IsTouchedBasePrice { get; set; } = false;

        public int Quantity { get; set; } = 0;

        public double BuyPrice { get; set; } = 0;
        public double BuyPrice1 { get; set; } = 0;
        public double BuyPrice2 { get; set; } = 0;
        public bool IsUseBuy { get; set; } = false;
        public bool IsBuyed { get; set; } = false;
            
        public double LosscutPrice { get; set; } = 0;
        public int LosscutPriceTick { get; set; } = 0;
        public bool IsUseLosscut { get; set; } = false;
        public bool IsLosscuted { get; set; } = false;

        public double RevenuePrice { get; set; } = 0;
        public int RevenuePriceTick { get; set; } = 0;
        public bool IsUseRevenue { get; set; } = false;
        public bool IsRevenued { get; set; } = false;

        public bool IsStoped { get; set; } = true;
        public TimeSpan ValidTimeSpan { get; set; }
        #endregion

        protected override string AtmanName => "STRATEGY";

        public StrategyTradeRule()
        {            
        }
        public override void InitRule()
        {
        }
        public override void Close()
        {
            IsUse = false;
        }

        public override void AnalysisAsync(CurrentPrice price)
        {
            Task.Factory.StartNew(() =>
            {
                Analysis(price);
            });
        }

        public override void Analysis(CurrentPrice price)
        {
            try
            {
                if (IsStoped) return;

                switch (PriceType)
                {
                    case "0":
                        CPrice = Math.Round(Convert.ToDouble(price.price), RoundNum);
                        break;
                    case "1":
                        CPrice = Math.Round(price.price3, RoundNum);
                        break;
                    case "2":
                        CPrice = Math.Round(price.price5, RoundNum);
                        break;
                    case "3":
                        CPrice = Math.Round(price.price7, RoundNum);
                        break;
                    default:                    
                        CPrice = Math.Round(Convert.ToDouble(price.price), RoundNum);
                        break;
                }
                
                if (BPrice == CPrice) return;
                if (HPrice < CPrice) HPrice = Math.Round(CPrice, RoundNum);
                if (LPrice > CPrice) LPrice = Math.Round(CPrice, RoundNum);

                PriceList.Insert(CPrice);

                if (! IsUse) return;

                // //매수포지션 사용여부
                if (!IsBuyed)
                {   
                    if (IsUseBuy)
                    {
                        //터치여부
                        if (!IsTouchedBasePrice)
                        {
                            if (PointsUtil.IsBreakThrough(BasePattern, BasePrice, PriceList))
                            {
                                IsTouchedBasePrice = true;
                                TradeEvents.Instance.OnTradeRuleHandler(AtmanName, ItemCode, "베이스 가격터치");
                            }
                        }
                        if (IsTouchedBasePrice && !IsBuyed)
                        {
                            //매도
                            if (Position == "1")
                            {
                                if (CPrice == BuyPrice)
                                {
                                    IsBuyed = true;
                                    SellBuy(Position);
                                }
                            }
                            //매수
                            if (Position == "2")
                            {
                                if (CPrice == BuyPrice)
                                {
                                    IsBuyed = true;
                                    SellBuy(Position);
                                }
                            }                            
                        }
                    }
                }
                if (IsBuyed && IsUseLosscut && !IsLosscuted)
                {
                    if (Position == "1")
                    {
                        if (CPrice == LosscutPrice)
                        {
                            IsLosscuted = true;
                            SellBuy("2");
                        }
                    }
                    //매수
                    if (Position == "2")
                    {
                        if (CPrice == LosscutPrice)
                        {
                            IsLosscuted = true;
                            SellBuy("1");
                        }
                    }
                }
                if (IsBuyed && IsUseRevenue && !IsRevenued)
                {
                    if (Position == "1")
                    {
                        if (CPrice == RevenuePrice)
                        {
                            IsRevenued = true;
                            SellBuy("2");
                        }
                    }
                    //매수
                    if (Position == "2")
                    {
                        if (CPrice == RevenuePrice)
                        {
                            IsRevenued = true;
                            SellBuy("1");
                        }
                    }
                }               
            }
            catch (Exception)
            {
            }
            finally
            {
                BPrice = CPrice;
            }
        }

        public void SellBuy(string position)
        {
            try
            {
                try
                {
                    XingContext.Instance.ClientContext.OrderBuySell(Item, position, "1", CPrice.ToString(), Quantity.ToString());
                }
                catch (Exception ex)
                {
                    TradeEvents.Instance.OnTradeRuleHandler(AtmanName, ItemCode, ex.Message);
                }
            }
            catch (Exception)
            {
            }
        }
    }
}
