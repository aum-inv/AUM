using OM.Lib.Base.Enums;
using System;
using System.Collections.Generic;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Windows.Forms.DataVisualization.Charting;

namespace OM.Vikala.Controls.Charts
{
    public class BaseChartControl : UserControl
    {
        private Chart chart;
        private HScrollBar hScrollBar;
        private TrackBar trackBar;

        public int SelectedTrackBarValue
        {
            get; set;
        } = 1;
        
        public virtual double SpaceMaxMin
        {
            get
            {
                int round = ItemCodeSet.GetItemRoundNum(ItemCode);

                if (round == 0) return 1;
                else if (round == 1) return 0.1;
                else if (round == 2) return 0.01;
                else if (round == 3) return 0.001;
                else if (round == 4) return 0.0001;
                else if (round == 5) return 0.00001;

                return 0.01;
            }
        }

        public virtual string Title
        {
            get;
            set;
        }
        public ChartEvents ChartEventInstance
        {
            get;
            set;
        } = null;

        public int MaximumDisplayItemCount
        {
            get;
            set;
        } = 30;
        
        public string ItemCode
        {
            get;
            set;
        } = "";

        public bool IsLoaded
        {
            get;
            set;
        } = false;

        public virtual bool IsAutoScrollX
        {
            get;
            set;
        }

        public virtual Lib.Base.Enums.TimeIntervalEnum TimeInterval
        {
            get;
            set;
        } = Lib.Base.Enums.TimeIntervalEnum.Day;

        public virtual CandleChartTypeEnum CandleChartType
        {
            get;
            set;
        } = CandleChartTypeEnum.기본;

        public virtual LineChartTypeEnum LineChartType
        {
            get;
            set;
        } = LineChartTypeEnum.기본;

        public System.Windows.Forms.DataVisualization.Charting.ChartArea CurrentChartArea
        {
            get
            {
                return chart.ChartAreas[0];
            }
        }

        public System.Windows.Forms.DataVisualization.Charting.Series CurrentSeries
        {
            get
            {
                return chart.Series[0];
            }
        }

        public void SetChartControl(Chart chart, HScrollBar hScrollBar, TrackBar trackBar)
        {
            this.chart = chart;
            this.hScrollBar = hScrollBar;
            this.trackBar = trackBar;
        }               

        public virtual void InitializeControl()
        {
            System.Windows.Forms.DataVisualization.Charting.ChartArea chartArea = chart.ChartAreas[0];
      
            chartArea.AxisX.IsLabelAutoFit = true;
            chartArea.AxisX.LabelStyle.Font = new System.Drawing.Font("돋움", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            chartArea.AxisX.LabelStyle.IsEndLabelVisible = true;
            chartArea.AxisX.LineColor = System.Drawing.Color.DimGray;
            chartArea.AxisX.MajorGrid.LineColor = System.Drawing.Color.FromArgb(((int)(((byte)(64)))), ((int)(((byte)(64)))), ((int)(((byte)(64)))), ((int)(((byte)(64)))));

            chartArea.AxisY2.IsLabelAutoFit = true;
            chartArea.AxisY2.LabelStyle.Font = new System.Drawing.Font("돋움", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(129)));
            chartArea.AxisY2.LabelStyle.ForeColor = System.Drawing.Color.DimGray;
            chartArea.AxisY2.LineColor = System.Drawing.Color.DimGray;

            chartArea.BackColor = Color.White;
            chartArea.BackGradientStyle = System.Windows.Forms.DataVisualization.Charting.GradientStyle.None;
            chartArea.BackSecondaryColor = System.Drawing.Color.White;
            chartArea.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(64)))), ((int)(((byte)(64)))), ((int)(((byte)(64)))), ((int)(((byte)(64)))));
            chartArea.BorderDashStyle = System.Windows.Forms.DataVisualization.Charting.ChartDashStyle.Solid;

            chartArea.InnerPlotPosition.Auto = false;
            chartArea.InnerPlotPosition.Height = 90F;
            chartArea.InnerPlotPosition.Width = 93F;
            chartArea.InnerPlotPosition.X = 2F;
            chartArea.Name = "chartArea";

            chartArea.Position.Auto = false;
            chartArea.Position.Height = 95F;
            chartArea.Position.Width = 98F;
            chartArea.Position.Y = 5F;
            chartArea.ShadowColor = System.Drawing.Color.Transparent;
        }
        public virtual void InitializeEvent(ChartEvents chartEvents)
        {
            ChartEventInstance = chartEvents;
            ChartEventInstance.ChangeChartScrollBarHandler += (e, v) => {
                if (!IsLoaded) return;
                if (this.chart == e) return;
                if (this.hScrollBar.Maximum < v) v = this.hScrollBar.Maximum;
                this.hScrollBar.Value = v;
            };
            ChartEventInstance.ChangeChartTrackBarHandler += (e, v) => {
                if (!IsLoaded) return;
                if (this.chart == e) return;
                if (this.trackBar.Maximum < v) v = this.trackBar.Maximum;
                this.trackBar.Value = v;
            };
        }
        public void Reset()
        {
            foreach(var s in chart.Series)
                s.Points.Clear();

            IsLoaded = false;
            hScrollBar.Minimum = hScrollBar.Maximum = hScrollBar.Value = 1;
            trackBar.Minimum = trackBar.Maximum = trackBar.Value = 1;
        }

        public virtual void View() {
            if (SelectedTrackBarValue > 1)
            {
                if (trackBar.Maximum < SelectedTrackBarValue)
                    trackBar.Value = trackBar.Maximum;
                else
                {
                    if (this.trackBar.Maximum < SelectedTrackBarValue) SelectedTrackBarValue = this.trackBar.Maximum;
                    trackBar.Value = SelectedTrackBarValue;
                }
            }

            System.Windows.Forms.DataVisualization.Charting.ChartArea chartArea = chart.ChartAreas[0];

            if (TimeInterval == Lib.Base.Enums.TimeIntervalEnum.Month)
                chartArea.AxisX.LabelStyle.Format = "yy/MM/dd";
            else if (TimeInterval == Lib.Base.Enums.TimeIntervalEnum.Day
                || TimeInterval == Lib.Base.Enums.TimeIntervalEnum.Week               
                )            
                chartArea.AxisX.LabelStyle.Format = "MM/dd";            
            else
                chartArea.AxisX.LabelStyle.Format = "HH:mm";
        }

        public void DrawChartTitle(ChartPaintEventArgs e)
        {
            string drawString = $"{Title}";
            System.Drawing.Font drawFont = new System.Drawing.Font("Arial", 8);
            System.Drawing.SolidBrush drawBrush = new System.Drawing.SolidBrush(System.Drawing.Color.Black);                     
            float x = 1.0F;
            float y = 0.0F;
            System.Drawing.StringFormat drawFormat = new System.Drawing.StringFormat();
            drawFormat.FormatFlags = System.Drawing.StringFormatFlags.NoWrap;
            e.ChartGraphics.Graphics.DrawString(drawString, drawFont, drawBrush, x, y, drawFormat);

            drawFont.Dispose();
            drawBrush.Dispose();
        }

        public void SetDataPointColor(
               DataPoint dataPoint
           , Color? headlegColor = null
           , Color? bodyLineColor = null
           , Color? bodyColor = null
           , int borderWidth = 1)
        {
            if (headlegColor != null) dataPoint.Color = headlegColor.Value;
            if (bodyLineColor != null) dataPoint.BorderColor = bodyLineColor.Value;
            if (bodyColor != null) dataPoint.SetCustomProperty("PriceUpColor", bodyColor.Value.Name);
            if (bodyColor != null) dataPoint.SetCustomProperty("PriceDownColor", bodyColor.Value.Name);
            dataPoint.BorderWidth = borderWidth;
        }
    }
}
