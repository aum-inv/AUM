using OM.Lib.Base.Utils;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace OM.PP.Chakra
{
    public class S_CandleItemData : A_HLOC
    {
        public S_CandleItemData() { }

        public S_CandleItemData(
                Single open
            ,   Single high
            ,   Single low
            ,   Single close
            ,   Single volume
            ,   DateTime dt)
        {
            base.OpenPrice = open;
            base.HighPrice = high;
            base.LowPrice = low;
            base.ClosePrice = close;
            base.Volume = volume;
            base.DTime = dt;
        }

        public Single Q_OpenPrice_S { get; set; } = 0;
        public Single Q_HighPrice_S { get; set; } = 0;
        public Single Q_LowPrice_S { get; set; } = 0;
        public Single Q_ClosePrice_S { get; set; } = 0;

        public Single Q_OpenPrice_T { get; set; } = 0;
        public Single Q_HighPrice_T { get; set; } = 0;
        public Single Q_LowPrice_T { get; set; } = 0;
        public Single Q_ClosePrice_T { get; set; } = 0;

        public Single GetPlusMass(A_HLOC b)
        {
            //전종 – 현종
            //전시 – 현시
            //전시 – 고
            //현시 - 고
            //전종 – 고
            //현종 – 고

            Single h = b.HighPrice > HighPrice ? b.HighPrice : HighPrice;

            Single m1 = Math.Abs(b.ClosePrice - this.ClosePrice);
            Single m2 = Math.Abs(b.OpenPrice - this.OpenPrice);
            Single m3 = Math.Abs(b.OpenPrice - h);
            Single m4 = Math.Abs(this.OpenPrice - h);
            Single m5 = Math.Abs(b.ClosePrice - h);
            Single m6 = Math.Abs(this.ClosePrice - h);

            return (m1 + m2 + m3 + m4 + m5 + m6);
        }

        public Single GetMinusMass(A_HLOC b)
        {
            //전종 – 현종
            //전시 – 현시
            //전시 – 고
            //현시 - 고
            //전종 – 고
            //현종 – 고

            Single l = b.LowPrice < LowPrice ? b.LowPrice : LowPrice;

            Single m1 = Math.Abs(b.ClosePrice - this.ClosePrice);
            Single m2 = Math.Abs(b.OpenPrice - this.OpenPrice);
            Single m3 = Math.Abs(b.OpenPrice - l);
            Single m4 = Math.Abs(this.OpenPrice - l);
            Single m5 = Math.Abs(b.ClosePrice - l);
            Single m6 = Math.Abs(this.ClosePrice - l);

            return (m1 + m2 + m3 + m4 + m5 + m6);
        }

        public PlusMinusTypeEnum PlusMinusType
        {
            get
            {
                if (OpenPrice < ClosePrice) return PlusMinusTypeEnum.양;
                else if (OpenPrice > ClosePrice) return PlusMinusTypeEnum.음;
                else return PlusMinusTypeEnum.무;
            }
        }

        public PlusMinusTypeEnum PlusMinusType2
        {
            get
            {
                if (CenterPrice < MiddlePrice) return PlusMinusTypeEnum.양;
                else if (CenterPrice > MiddlePrice) return PlusMinusTypeEnum.음;
                else return PlusMinusTypeEnum.무;
            }
        }

        public void SetQuantum(S_CandleItemData bData = null)
        {
            //전일데이터를 바탕으로 양자가격을 만든다.
            //전일중심값을 기준으로 한다.
            if (bData != null)
            {
                Single basePrice = bData.CenterPrice;
                //if (basePrice < OpenPrice) Q_OpenPrice_T = basePrice - Math.Abs(basePrice - OpenPrice);
                //else Q_OpenPrice_T = basePrice + Math.Abs(basePrice - OpenPrice);

                //if (basePrice < ClosePrice) Q_ClosePrice_T = basePrice - Math.Abs(basePrice - ClosePrice);
                //else Q_ClosePrice_T = basePrice + Math.Abs(basePrice - ClosePrice);

                //if (basePrice < HighPrice) Q_HighPrice_T = basePrice - Math.Abs(basePrice - HighPrice);
                //else Q_HighPrice_T = basePrice + Math.Abs(basePrice - HighPrice);

                //if (basePrice < LowPrice) Q_LowPrice_T = basePrice - Math.Abs(basePrice - LowPrice);
                //else Q_LowPrice_T = basePrice + Math.Abs(basePrice - LowPrice);

                basePrice = bData.OpenPrice;
                if (basePrice < OpenPrice) Q_OpenPrice_T = basePrice - Math.Abs(basePrice - OpenPrice);
                else Q_OpenPrice_T = basePrice + Math.Abs(basePrice - OpenPrice);

                basePrice = bData.ClosePrice;
                if (basePrice < ClosePrice) Q_ClosePrice_T = basePrice - Math.Abs(basePrice - ClosePrice);
                else Q_ClosePrice_T = basePrice + Math.Abs(basePrice - ClosePrice);

                basePrice = bData.HighPrice;
                if (basePrice < HighPrice) Q_HighPrice_T = basePrice - Math.Abs(basePrice - HighPrice);
                else Q_HighPrice_T = basePrice + Math.Abs(basePrice - HighPrice);

                basePrice = bData.LowPrice;
                if (basePrice < LowPrice) Q_LowPrice_T = basePrice - Math.Abs(basePrice - LowPrice);
                else Q_LowPrice_T = basePrice + Math.Abs(basePrice - LowPrice);

                var tmpH = new[] { Q_OpenPrice_T, Q_ClosePrice_T, Q_HighPrice_T, Q_LowPrice_T }.Max();
                var tmpL = new[] { Q_OpenPrice_T, Q_ClosePrice_T, Q_HighPrice_T, Q_LowPrice_T }.Min();

                Q_HighPrice_T = tmpH;
                Q_LowPrice_T = tmpL;
            }
            else
            {
                //당일데이터를 바탕으로 양자가격을 만든다.
                //당일시가를 기준으로 한다.

                Single basePrice = OpenPrice;

                if (basePrice < OpenPrice) Q_OpenPrice_S = basePrice - Math.Abs(basePrice - OpenPrice);
                else Q_OpenPrice_S = basePrice + Math.Abs(basePrice - OpenPrice);

                if (basePrice < ClosePrice) Q_ClosePrice_S = basePrice - Math.Abs(basePrice - ClosePrice);
                else Q_ClosePrice_S = basePrice + Math.Abs(basePrice - ClosePrice);

                if (basePrice < HighPrice) Q_HighPrice_S = basePrice - Math.Abs(basePrice - HighPrice);
                else Q_HighPrice_S = basePrice + Math.Abs(basePrice - HighPrice);

                if (basePrice < LowPrice) Q_LowPrice_S = basePrice - Math.Abs(basePrice - LowPrice);
                else Q_LowPrice_S = basePrice + Math.Abs(basePrice - LowPrice);

                var tmpH = new[] { Q_OpenPrice_S, Q_ClosePrice_S, Q_HighPrice_S, Q_LowPrice_S }.Max();
                var tmpL = new[] { Q_OpenPrice_S, Q_ClosePrice_S, Q_HighPrice_S, Q_LowPrice_S }.Min();

                Q_HighPrice_S = tmpH;
                Q_LowPrice_S = tmpL;
            }
        }
    }
}
