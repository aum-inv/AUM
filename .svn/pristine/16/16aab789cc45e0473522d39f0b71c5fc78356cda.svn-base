using OM.Lib.Base.Enums;
using OM.Lib.Base.Utils;
using OM.Lib.Entity;
using OM.Lib.Framework.Db;
using OM.PP.Chakra;
using OM.PP.Chakra.Ctx;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace OM.Atman.Chakra
{
    public class TickLineTradeRule : BaseTradeRule
    {
        public override string AtmanName => "TICK PATTERN";

        string priceType;
        public TickLineTradeRule(string itemCode, string priceType)
        {
            ItemCode = itemCode;
            this.priceType = priceType;
        }
        
        public override void InitRule()
        {
        }
        public override void Analysis(CurrentPrice price)
        {
            try
            {
                switch (priceType)
                {
                    case "0":
                        CPrice = Math.Round(Convert.ToDouble(price.price), RoundNum);
                        break;
                    case "1":
                        CPrice = Math.Round(price.price3, RoundNum);
                        break;
                    case "2":
                        CPrice = Math.Round(price.price5, RoundNum);
                        break;
                    case "3":
                        CPrice = Math.Round(price.price7, RoundNum);
                        break;
                    default:
                        CPrice = Math.Round(Convert.ToDouble(price.price), RoundNum);
                        break;
                }
                if (BPrice == CPrice) return;

                PriceList.Insert(CPrice);

                var lineChartPattern2 = PointsUtil.GetTwoLinePattern(PriceList);
                if (lineChartPattern2 != TickLineChartPatternEnum.None)
                    PPEvents.Instance.OnTickLineChartPatternHandler(ItemCode, TimeIntervalEnum.Tick, lineChartPattern2);

                var lineChartPattern3 = PointsUtil.GetThreeLinePattern(PriceList);
                if (lineChartPattern3 != TickLineChartPatternEnum.None)
                    PPEvents.Instance.OnTickLineChartPatternHandler(ItemCode, TimeIntervalEnum.Tick, lineChartPattern3);
            }
            catch (Exception)
            {
            }
            finally
            {
                BPrice = CPrice;
            }
        }
    }
}
