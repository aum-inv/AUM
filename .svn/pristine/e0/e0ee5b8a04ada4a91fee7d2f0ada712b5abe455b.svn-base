using MaterialSkin;
using MaterialSkin.Controls;
using MetroFramework.Forms;
using OM.Lib.Base.Enums;
using OM.PP.Chakra.Ctx;
using OM.PP.XingApp.Api;
using OM.PP.XingApp.Config;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using XA_SESSIONLib;

namespace OM.PP.XingApp
{
    public partial class XingAppForm : MetroForm
    {
        //xing 인증
        private XASessionClass session = new XASessionClass();

        System.Threading.Timer timer = null;

        Api_Index apiIndex = new Api.Api_Index();
        Api_IndexFuture apiIndexF = new Api.Api_IndexFuture();
        Api_IndexFutureDWM apiIndexFDWM = new Api.Api_IndexFutureDWM();
   

        bool isRuning = false;
        bool isAutoKoreaIndex = false;        
        bool isAutoFF = false;
        bool isLogoned = false;
        public XingAppForm()
        {
            InitializeComponent();
           
            Control.CheckForIllegalCrossThreadCalls = false;
            this.Load += XingAppForm_Load;

            apiIndex.ApiLogHandler += (log) => { LogWrite(log); };
            apiIndexF.ApiLogHandler += (log) => { LogWrite(log); };
            apiIndexFDWM.ApiLogHandler += (log) => { LogWrite(log); };           
      
            serverInfo();
        }
        private void serverInfo()
        {
            PPServerConfigData.IP = ConfigurationManager.AppSettings["PPService_IP"];
            PPServerConfigData.Port = Convert.ToInt32(ConfigurationManager.AppSettings["PPService_Port"]);

            PPContext.Instance.OnCreateClient();
        }

        private void InitializeTimer()
        {
            timer = new System.Threading.Timer(timer_Tick, null, TimeSpan.FromSeconds(10), TimeSpan.FromSeconds(10));           
        }

        private void timer_Tick(object state)
        {
            if (isRuning) return;

            isRuning = true;
            if (isAutoKoreaIndex)
            {
                //queryKoreaIndexR(ItemCodeSet.GetItemCode(ItemCode.지수_국내_코스피200));
                //System.Threading.Thread.Sleep(3000);
                queryKoreaIndexFR(ItemCodeSet.GetItemCode(ItemCode.선물_국내_코스피200));
                System.Threading.Thread.Sleep(3000);
            }

            if (isAutoFF)
            {
                queryFFR(ItemCodeSet.GetItemCode(ItemCode.선물_해외_GOLD));
                System.Threading.Thread.Sleep(3000);
                queryFFR(ItemCodeSet.GetItemCode(ItemCode.선물_해외_NG));
                System.Threading.Thread.Sleep(3000);
                queryFFR(ItemCodeSet.GetItemCode(ItemCode.선물_해외_SILVER));
                System.Threading.Thread.Sleep(3000);
                queryFFR(ItemCodeSet.GetItemCode(ItemCode.선물_해외_WTI));
                System.Threading.Thread.Sleep(3000);
                queryFFR(ItemCodeSet.GetItemCode(ItemCode.선물_해외_나스닥));
                System.Threading.Thread.Sleep(3000);
                queryFFR(ItemCodeSet.GetItemCode(ItemCode.선물_해외_항셍));
                System.Threading.Thread.Sleep(3000);
            }
            isRuning = false;
        }

        #region XingLoginLogout
        private void XingAppForm_Load(object sender, EventArgs e)
        {
            session._IXASessionEvents_Event_Login += Session__IXASessionEvents_Event_Login;
        }

        private void Session__IXASessionEvents_Event_Login(string szCode, string szMsg)
        {
            //MessageBox.Show(szMsg);

        }

        private void btnLogin_Click(object sender, EventArgs e)
        {
            bool isAliveServer = session.ConnectServer(AccountInfo.서버정보, 80);
            LogWrite("IsAliveServer => " + isAliveServer.ToString());

            bool isSuccess = session.Login(
                AccountInfo.접속아이디
                , AccountInfo.접속비밀번호
                , AccountInfo.인증비밀번호
                //, (int)XA_SESSIONLib.XA_SERVER_TYPE.XA_REAL_SERVER
                , (int)XA_SESSIONLib.XA_SERVER_TYPE.XA_SIMUL_SERVER
                , false);

            lblLogin.BackColor = isSuccess ? Color.Blue : Color.Black;
            LogWrite("IsConnectedServer => " + isSuccess.ToString());
            isLogoned = true;
            btnClose.Enabled = true;

            InitializeTimer();
        }

        private void btnClose_Click(object sender, EventArgs e)
        {
            this.Close();
        }
        #endregion

        void LogWrite(string log)
        {
            if (tbLog.InvokeRequired)
            {
                tbLog.Invoke(new MethodInvoker(() =>
                {
                    tbLog.AppendText(log);
                    tbLog.AppendText(Environment.NewLine);
                }));
            }
            else
            {
                tbLog.AppendText(log);
                tbLog.AppendText(Environment.NewLine);
            }
        }

        #region QueryButtonEvent
        private void btnKospi200_Click(object sender, EventArgs e)
        {
            if (!isLogoned) return;
            queryKoreaIndex(ItemCodeSet.GetItemCode(ItemCode.지수_국내_코스피200));
        }
        private void btnKospi200F_Click(object sender, EventArgs e)
        {
            if (!isLogoned) return;
            queryKoreaIndexF(ItemCodeSet.GetItemCode(ItemCode.선물_국내_코스피200));
        }
        private void btnFF_Click(object sender, EventArgs e)
        {
            if (!isLogoned) return;
            Button btn = sender as Button;
            queryFF(btn.Text);
        }
        #endregion

        private void queryKoreaIndex(string itemCode)
        {
            //apiIndex.Query(itemCode, "2", "1");
            //System.Threading.Thread.Sleep(3000);

            Task.Factory.StartNew(() =>
            {
                apiIndex.Query(itemCode, "1", "1");
                System.Threading.Thread.Sleep(3500);

                apiIndex.Query(itemCode, "1", "5"); 
                System.Threading.Thread.Sleep(3500);

                apiIndex.Query(itemCode, "1", "10");
                System.Threading.Thread.Sleep(3500);

                apiIndex.Query(itemCode, "1", "30"); 
                System.Threading.Thread.Sleep(3500);

                apiIndex.Query(itemCode, "1", "60");
                System.Threading.Thread.Sleep(3500);

                apiIndex.Query(itemCode, "1", "120"); 
                System.Threading.Thread.Sleep(3500);

                apiIndex.Query(itemCode, "2");
                System.Threading.Thread.Sleep(3500);

                apiIndex.Query(itemCode, "3");
                System.Threading.Thread.Sleep(3500);

                apiIndex.Query(itemCode, "4");
                System.Threading.Thread.Sleep(3500);
            });
        }
        private void queryKoreaIndexR(string itemCode)
        {
            apiIndex.Query(itemCode, "1", "1", "10"); 
            System.Threading.Thread.Sleep(3500);

            apiIndex.Query(itemCode, "1", "5", "5"); 
            System.Threading.Thread.Sleep(3500);

            apiIndex.Query(itemCode, "1", "10", "3");
            System.Threading.Thread.Sleep(3500);

            apiIndex.Query(itemCode, "1", "30", "1");
            System.Threading.Thread.Sleep(3500);

            apiIndex.Query(itemCode, "1", "60", "1");
            System.Threading.Thread.Sleep(3500);

            apiIndex.Query(itemCode, "1", "120", "1");
            System.Threading.Thread.Sleep(3500);

            apiIndex.Query(itemCode, "2", "1", "1");
            System.Threading.Thread.Sleep(3500);
        }

        private void queryKoreaIndexF(string itemCode)
        {   
            Task.Factory.StartNew(() =>
            {
                apiIndexF.Query(itemCode, "1", "1", "100"); 
                System.Threading.Thread.Sleep(3500);

                apiIndexF.Query(itemCode, "1", "5", "50");
                System.Threading.Thread.Sleep(3500);

                apiIndexF.Query(itemCode, "1", "10", "30");
                System.Threading.Thread.Sleep(3500);

                apiIndexF.Query(itemCode, "1", "30", "20");
                System.Threading.Thread.Sleep(3500);

                apiIndexF.Query(itemCode, "1", "60", "10");
                System.Threading.Thread.Sleep(3500);

                apiIndexF.Query(itemCode, "1", "120", "10");
                System.Threading.Thread.Sleep(3500);

                apiIndexFDWM.Query(itemCode, "2", "10");
                System.Threading.Thread.Sleep(3500);

                apiIndexFDWM.Query(itemCode, "3", "10");
                System.Threading.Thread.Sleep(3500);

                apiIndexFDWM.Query(itemCode, "4", "1");
                System.Threading.Thread.Sleep(3500);
            });
        }
        private void queryKoreaIndexFR(string itemCode)
        {
            apiIndexF.Query(itemCode, "1", "1", "100");
            System.Threading.Thread.Sleep(3500);

            apiIndexF.Query(itemCode, "1", "5", "50");
            System.Threading.Thread.Sleep(3500);

            apiIndexF.Query(itemCode, "1", "10", "30");
            System.Threading.Thread.Sleep(3500);

            apiIndexF.Query(itemCode, "1", "30", "10");
            System.Threading.Thread.Sleep(3500);

            apiIndexF.Query(itemCode, "1", "60", "10");
            System.Threading.Thread.Sleep(3500);

            apiIndexF.Query(itemCode, "1", "120", "10");
            System.Threading.Thread.Sleep(3500);

            apiIndexFDWM.Query(itemCode, "2", "1");
            System.Threading.Thread.Sleep(3500);
        }
        
        private void queryFF(string itemCode)
        {
            //apiFF.Query(itemCode, "1", "1");
            //apiFFDWM.Query(itemCode, "2");

            Task.Factory.StartNew(() =>
            {
                Api_WorldFuture apiFF = new Api.Api_WorldFuture();
                Api_WorldFutureDWM apiFFDWM = new Api.Api_WorldFutureDWM();
                apiFF.ApiLogHandler += (log) => { LogWrite(log); };
                apiFFDWM.ApiLogHandler += (log) => { LogWrite(log); };

                apiFF.Query(itemCode, "1", "1");
                System.Threading.Thread.Sleep(3500);

                apiFF.Query(itemCode, "1", "5");
                System.Threading.Thread.Sleep(3500);

                apiFF.Query(itemCode, "1", "10");
                System.Threading.Thread.Sleep(3500);

                apiFF.Query(itemCode, "1", "30");
                System.Threading.Thread.Sleep(3500);

                apiFF.Query(itemCode, "1", "60");
                System.Threading.Thread.Sleep(3500);

                apiFF.Query(itemCode, "1", "120"); 
                System.Threading.Thread.Sleep(3500);

                apiFFDWM.Query(itemCode, "2"); 
                System.Threading.Thread.Sleep(3500);

                apiFFDWM.Query(itemCode, "3");
                System.Threading.Thread.Sleep(3500);

                apiFFDWM.Query(itemCode, "4"); 
                System.Threading.Thread.Sleep(3500);
            });
        }
        private void queryFFR(string itemCode)
        {
            Api_WorldFuture apiFF = new Api.Api_WorldFuture();
            Api_WorldFutureDWM apiFFDWM = new Api.Api_WorldFutureDWM();
            apiFF.ApiLogHandler += (log) => { LogWrite(log); };
            apiFFDWM.ApiLogHandler += (log) => { LogWrite(log); };

            apiFF.Query(itemCode, "1", "1", "100");
            System.Threading.Thread.Sleep(3500);

            apiFF.Query(itemCode, "1", "5", "50");
            System.Threading.Thread.Sleep(3500);

            apiFF.Query(itemCode, "1", "10", "20"); 
            System.Threading.Thread.Sleep(3500);

            apiFF.Query(itemCode, "1", "30", "20");
            System.Threading.Thread.Sleep(3500);

            apiFF.Query(itemCode, "1", "60", "10");
            System.Threading.Thread.Sleep(3500);

            apiFF.Query(itemCode, "1", "120", "10");
            System.Threading.Thread.Sleep(3500);

            apiFFDWM.Query(itemCode, "2", "10");
            System.Threading.Thread.Sleep(3500);
        }

        private void chkKoreaIndex_CheckedChanged(object sender, EventArgs e)
        {
            isAutoKoreaIndex = chkKoreaIndex.Checked;
        }

        private void chkFF_CheckedChanged(object sender, EventArgs e)
        {
            isAutoFF = chkFF.Checked;
        }

        private void btnKospiSeparate_Click(object sender, EventArgs e)
        {
            if (!isLogoned) return;
            string itemCode = ItemCodeSet.GetItemCode(ItemCode.지수_국내_코스피200);
            string itemCodeF = ItemCodeSet.GetItemCode(ItemCode.선물_국내_코스피200);
            Button btn = sender as Button;
            Task.Factory.StartNew(() =>
            {
                switch (btn.Text)
                {
                    case "1분":
                        apiIndex.Query(itemCode, "1", "1", "100");
                        System.Threading.Thread.Sleep(3500);
                        apiIndexF.Query(itemCode, "1", "1", "100");
                        break;
                    case "5분":
                        apiIndex.Query(itemCode, "1", "5", "50");
                        System.Threading.Thread.Sleep(3500);
                        apiIndexF.Query(itemCode, "1", "5", "50");
                        break;
                    case "10분":
                        apiIndex.Query(itemCode, "1", "10", "40");
                        System.Threading.Thread.Sleep(3500);
                        apiIndexF.Query(itemCode, "1", "10", "40");
                        break;
                    case "30분":
                        apiIndex.Query(itemCode, "1", "30", "30");
                        System.Threading.Thread.Sleep(3500);
                        apiIndexF.Query(itemCode, "1", "30", "30");
                        break;
                    case "60분":
                        apiIndex.Query(itemCode, "1", "60", "20");
                        System.Threading.Thread.Sleep(3500);
                        apiIndexF.Query(itemCode, "1", "60", "20");
                        break;
                    case "120분":
                        apiIndex.Query(itemCode, "1", "120", "10");
                        System.Threading.Thread.Sleep(3500);
                        apiIndexF.Query(itemCode, "1", "120", "10");
                        break;
                    case "일":
                        apiIndex.Query(itemCode, "2", "1", "2");
                        System.Threading.Thread.Sleep(3500);
                        apiIndexFDWM.Query(itemCode, "2", "2");
                        break;
                    case "주":
                        apiIndex.Query(itemCode, "3", "1", "1");
                        System.Threading.Thread.Sleep(3500);
                        apiIndexFDWM.Query(itemCode, "3", "1");
                        break;
                    case "월":
                        apiIndex.Query(itemCode, "4", "1", "1");
                        System.Threading.Thread.Sleep(3500);
                        apiIndexFDWM.Query(itemCode, "4", "1");
                        break;
                }
            });
        }
        private void btnFFSeparate_Click(object sender, EventArgs e)
        {
            if (!isLogoned) return;
            Button btn = sender as Button;

            Api_WorldFuture apiFF = new Api.Api_WorldFuture();
            Api_WorldFutureDWM apiFFDWM = new Api.Api_WorldFutureDWM();
            apiFF.ApiLogHandler += (log) => { LogWrite(log); };
            apiFFDWM.ApiLogHandler += (log) => { LogWrite(log); };

            switch (btn.Text)
            {
                case "1분":
                    Task.Factory.StartNew(() => { 
                        apiFF.Query("CL", "1", "1", "100");
                        System.Threading.Thread.Sleep(3500);
                        apiFF.Query("NG", "1", "1", "100");
                        System.Threading.Thread.Sleep(3500);
                        apiFF.Query("GC", "1", "1", "100");
                        System.Threading.Thread.Sleep(3500);
                        apiFF.Query("SI", "1", "1", "100");
                        System.Threading.Thread.Sleep(3500);
                        apiFF.Query("HSI", "1", "1", "100");
                        System.Threading.Thread.Sleep(3500);
                        apiFF.Query("NQ", "1", "1", "100");
                    });
                    break;
                case "5분":
                    Task.Factory.StartNew(() => {
                        apiFF.Query("CL", "1", "5", "50");
                        System.Threading.Thread.Sleep(3500);
                        apiFF.Query("NG", "1", "5", "50");
                        System.Threading.Thread.Sleep(3500);
                        apiFF.Query("GC", "1", "5", "50");
                        System.Threading.Thread.Sleep(3500);
                        apiFF.Query("SI", "1", "5", "50");
                        System.Threading.Thread.Sleep(3500);
                        apiFF.Query("HSI", "1", "5", "50");
                        System.Threading.Thread.Sleep(3500);
                        apiFF.Query("NQ", "1", "5", "50");
                    });
                    break;
                case "10분":
                    Task.Factory.StartNew(() => {
                        apiFF.Query("CL", "1", "10", "40");
                        System.Threading.Thread.Sleep(3500);
                        apiFF.Query("NG", "1", "10", "40");
                        System.Threading.Thread.Sleep(3500);
                        apiFF.Query("GC", "1", "10", "40");
                        System.Threading.Thread.Sleep(3500);
                        apiFF.Query("SI", "1", "10", "40");
                        System.Threading.Thread.Sleep(3500);
                        apiFF.Query("HSI", "1", "10", "40");
                        System.Threading.Thread.Sleep(3500);
                        apiFF.Query("NQ", "1", "10", "40");
                    });
                    break;
                case "30분":
                    Task.Factory.StartNew(() => {
                        apiFF.Query("CL", "1", "30", "30");
                        System.Threading.Thread.Sleep(3500);
                        apiFF.Query("NG", "1", "30", "30");
                        System.Threading.Thread.Sleep(3500);
                        apiFF.Query("GC", "1", "30", "30");
                        System.Threading.Thread.Sleep(3500);
                        apiFF.Query("SI", "1", "30", "30");
                        System.Threading.Thread.Sleep(3500);
                        apiFF.Query("HSI", "1", "30", "30");
                        System.Threading.Thread.Sleep(3500);
                        apiFF.Query("NQ", "1", "30", "30");
                    });
                    break;
                case "60분":
                    Task.Factory.StartNew(() => {
                        apiFF.Query("CL", "1", "60", "20");
                        System.Threading.Thread.Sleep(3500);
                        apiFF.Query("NG", "1", "60", "20");
                        System.Threading.Thread.Sleep(3500);
                        apiFF.Query("GC", "1", "60", "20");
                        System.Threading.Thread.Sleep(3500);
                        apiFF.Query("SI", "1", "60", "20");
                        System.Threading.Thread.Sleep(3500);
                        apiFF.Query("HSI", "1", "60", "20");
                        System.Threading.Thread.Sleep(3500);
                        apiFF.Query("NQ", "1", "60", "20");
                    });
                    break;
                case "120분":
                    Task.Factory.StartNew(() => {
                        apiFF.Query("CL", "1", "120", "10");
                        System.Threading.Thread.Sleep(3500);
                        apiFF.Query("NG", "1", "120", "10");
                        System.Threading.Thread.Sleep(3500);
                        apiFF.Query("GC", "1", "120", "10");
                        System.Threading.Thread.Sleep(3500);
                        apiFF.Query("SI", "1", "120", "10");
                        System.Threading.Thread.Sleep(3500);
                        apiFF.Query("HSI", "1", "120", "10");
                        System.Threading.Thread.Sleep(3500);
                        apiFF.Query("NQ", "1", "120", "10");
                    });
                    break;
                case "일":
                    Task.Factory.StartNew(() => {
                        apiFFDWM.Query("CL", "2", "5");
                        System.Threading.Thread.Sleep(3500);
                        apiFFDWM.Query("NG", "2", "5");
                        System.Threading.Thread.Sleep(3500);
                        apiFFDWM.Query("GC", "2", "5");
                        System.Threading.Thread.Sleep(3500);
                        apiFFDWM.Query("SI", "2", "5");
                        System.Threading.Thread.Sleep(3500);
                        apiFFDWM.Query("HSI", "2", "5");
                        System.Threading.Thread.Sleep(3500);
                        apiFFDWM.Query("NQ", "2", "5");
                    });
                    break;
                case "주":
                    Task.Factory.StartNew(() => {
                        apiFFDWM.Query("CL", "3", "2");
                        System.Threading.Thread.Sleep(3500);
                        apiFFDWM.Query("NG", "3", "2");
                        System.Threading.Thread.Sleep(3500);
                        apiFFDWM.Query("GC", "3", "2");
                        System.Threading.Thread.Sleep(3500);
                        apiFFDWM.Query("SI", "3", "2");
                        System.Threading.Thread.Sleep(3500);
                        apiFFDWM.Query("HSI", "3", "2");
                        System.Threading.Thread.Sleep(3500);
                        apiFFDWM.Query("NQ", "3", "2");
                    });
                    break;
                case "월":
                    Task.Factory.StartNew(() => {
                        apiFFDWM.Query("CL", "4", "1");
                        System.Threading.Thread.Sleep(3500);
                        apiFFDWM.Query("NG", "4", "1");
                        System.Threading.Thread.Sleep(3500);
                        apiFFDWM.Query("GC", "4", "1");
                        System.Threading.Thread.Sleep(3500);
                        apiFFDWM.Query("SI", "4", "1");
                        System.Threading.Thread.Sleep(3500);
                        apiFFDWM.Query("HSI", "4", "1");
                        System.Threading.Thread.Sleep(3500);
                        apiFFDWM.Query("NQ", "4", "1");
                    });
                    break;
            }
        }
        
        private void btnReal_Click(object sender, EventArgs e)
        {
            if (!isLogoned) return;

            btnReal.Enabled = false;

            Task.Factory.StartNew(() => {
                Api.Api_IndexFutureReal realKF = new Api_IndexFutureReal();
                realKF.Query("101P3000", "90199999");
                System.Threading.Thread.Sleep(5000);

                Api.Api_WorldFutureReal realFFCL = new Api_WorldFutureReal();
                realFFCL.Query("CLJ19", "CL");
                System.Threading.Thread.Sleep(5000);

                Api.Api_WorldFutureReal realFFNG = new Api_WorldFutureReal();
                realFFNG.Query("NGJ19", "NG");
                System.Threading.Thread.Sleep(5000);

                Api.Api_WorldFutureReal realFFGC = new Api_WorldFutureReal();
                realFFGC.Query("GCJ19", "GC");
                System.Threading.Thread.Sleep(5000);

                Api.Api_WorldFutureReal realFFSI = new Api_WorldFutureReal();
                realFFSI.Query("SIH19", "SI");
                System.Threading.Thread.Sleep(5000);

                Api.Api_WorldFutureReal realFFHSI = new Api_WorldFutureReal();
                realFFHSI.Query("HSIG19", "HSI");
                System.Threading.Thread.Sleep(5000);

                Api.Api_WorldFutureReal realFFNQ = new Api_WorldFutureReal();
                realFFNQ.Query("NQH19", "NQ");
            });
        }
    }
}
