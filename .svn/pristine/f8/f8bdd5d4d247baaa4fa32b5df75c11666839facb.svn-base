using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace OM.PP.Chakra
{
    /// <summary>
    /// 
    /// </summary>
    public class T_AtomItemData : S_CandleItemData, ITransform
    {
        private S_CandleItemData sourceData = null;

        private List<S_CandleItemData> sourceDataArray = null;

        public T_AtomItemData(S_CandleItemData sourceData)
        {
            this.sourceData = sourceData;
            this.sourceDataArray = null;
        }
        /// <summary>
        /// 최근 시고저종을 찾고, 거기에서 퀀텀을 만든다.
        /// </summary>
        /// <param name="sourceDataArray"></param>
        public T_AtomItemData(S_CandleItemData sourceData, List<S_CandleItemData> sourceDataArray)
        {
            this.sourceData = sourceData;
            this.sourceDataArray = sourceDataArray;
        }


        public Single t_open = 0;
        public Single t_high = 0;
        public Single t_low = 0;
        public Single t_close = 0;        
        public Single T_OpenPrice { get { return t_open; } }
        public Single T_HighPrice { get { return t_high; } }
        public Single T_LowPrice { get { return t_low; } }
        public Single T_ClosePrice { get { return t_close; } }


        public Single t_Avg = 0;
        public Single t_MassAvg = 0;
        public Single t_QuantumAvg = 0;
        public Single T_Avg { get { return t_Avg; } }
        public Single T_MassAvg { get { return t_MassAvg; } }
        public Single T_QuantumAvg { get { return t_QuantumAvg; } }
        public A_HLOC Source1Data { get { return sourceData; } }
        
        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public void Transform()
        {
            try
            {
                if (sourceData != null)
                {
                    Single cdiff = Math.Abs(sourceData.OpenPrice - sourceData.ClosePrice);
                    //양봉
                    if (sourceData.PlusMinusType == PlusMinusTypeEnum.양)
                    {
                        t_open = sourceData.OpenPrice;
                        t_high = sourceData.OpenPrice;
                        t_low = t_close = sourceData.OpenPrice - cdiff;
                    }
                    else if (sourceData.PlusMinusType == PlusMinusTypeEnum.음)
                    {
                        t_open = sourceData.OpenPrice;
                        t_low = sourceData.OpenPrice;
                        t_high = t_close = sourceData.OpenPrice + cdiff;
                    }
                    else
                    {
                        t_open = sourceData.OpenPrice;
                        t_high = sourceData.OpenPrice;
                        t_low = t_close = sourceData.OpenPrice;
                    }
                    ItemCode = sourceData.ItemCode;
                    OpenPrice = sourceData.OpenPrice;
                    HighPrice = sourceData.HighPrice;
                    LowPrice = sourceData.LowPrice;
                    ClosePrice = sourceData.ClosePrice;
                    DTime = sourceData.DTime;
                }

                if (sourceDataArray != null)
                {
                    t_Avg = (Single)sourceDataArray.Average(t => t.ClosePrice);
                    t_MassAvg = (Single)sourceDataArray.Average(t => t.MassPrice);
                    t_QuantumAvg = (Single)sourceDataArray.Average(t => t.QuantumPrice);
                }
            }
            catch (Exception ex)
            {
            }
        }
    }
}
