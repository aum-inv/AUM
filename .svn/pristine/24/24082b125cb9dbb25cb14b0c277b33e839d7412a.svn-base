using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using OM.PP.Chakra;
using System.Windows.Forms.DataVisualization.Charting;
using OM.Lib.Base.Utils;

namespace OM.Vikala.Controls.Charts
{
    public partial class WuXingCandleChart : BaseChartControl
    {
        public bool IsAutoScrollX
        {
            get { return pnlScroll.Visible; }
            set { pnlScroll.Visible = value; }
        }

        public List<T_WuXingItemData> ChartData
        {
            get;
            set;
        }

        public void LoadData(string itemCode = "", List <T_WuXingItemData> chartData = null)
        {
            if (chartData.Count < MaximumDisplayItemCount)
                MaximumDisplayItemCount = chartData.Count;

            ItemCode = itemCode;
            ChartData = chartData;
            Reset();
            View();
        }
        
        public WuXingCandleChart() 
        {
            InitializeComponent();
            base.SetChartControl(chart, hScrollBar, trackBar);
        }

        public override void View()
        {
            pnlScroll.Visible = IsAutoScrollX;
            if (ChartData == null) return;
            foreach (var item in ChartData)
            {
                int idx = chart.Series[0].Points.AddXY(item.DTime, item.HighPrice, item.LowPrice, item.OpenPrice, item.ClosePrice);
                var dataPoint = chart.Series[0].Points[idx];
                dataPoint.Label = item.AccuIdx.ToString();

                int lineWidth = 2;
                WuXingTypeEnum WuXingType = item.WuXingType;
                if (WuXingType == WuXingTypeEnum.무극_토)
                    SetDataPointColor(dataPoint, Color.Yellow, Color.Yellow, Color.Yellow, lineWidth);
                else if (WuXingType == WuXingTypeEnum.양명)
                    SetDataPointColor(dataPoint, Color.Red, Color.Yellow, Color.Yellow, lineWidth);
                else if (WuXingType == WuXingTypeEnum.궐음)
                    SetDataPointColor(dataPoint, Color.Blue, Color.Yellow, Color.Yellow, lineWidth);

                else if (WuXingType == WuXingTypeEnum.태양_화)
                    SetDataPointColor(dataPoint, Color.Red, Color.Red, Color.Red, lineWidth);
                else if (WuXingType == WuXingTypeEnum.태음_수)
                    SetDataPointColor(dataPoint, Color.Blue, Color.Blue, Color.Blue, lineWidth);

                else if (WuXingType == WuXingTypeEnum.소양_목)
                    SetDataPointColor(dataPoint, Color.Green, Color.Green, Color.Green, lineWidth);
                else if (WuXingType == WuXingTypeEnum.소음_금)
                    SetDataPointColor(dataPoint, Color.Gray, Color.Gray, Color.Gray, lineWidth);
                else
                {
                    SetDataPointColor(dataPoint, Color.LightGray, Color.LightGray, Color.White, 1);
                    dataPoint.BorderDashStyle = ChartDashStyle.Dot;
                }
            }

            double maxPrice = ChartData.Max(m => m.HighPrice);
            double minPrice = ChartData.Min(m => m.LowPrice);
            maxPrice = maxPrice + (maxPrice * SpaceMaxMin);
            minPrice = minPrice - (minPrice * SpaceMaxMin);
            chart.ChartAreas[0].AxisY2.Maximum = maxPrice;
            chart.ChartAreas[0].AxisY2.Minimum = minPrice;

            chart.ChartAreas[0].AxisY2.LabelStyle.Format = "{N2}";

            SetScrollBar();
            SetTrackBar();
            DisplayView();

            IsLoaded = true;

            base.View();
        }
        
        public void SetScrollBar()
        {
            int trackView = trackBar.Value;
            int displayItemCount = MaximumDisplayItemCount * trackView;

            int maxScrollValue = (int)Math.Ceiling((Convert.ToDouble(ChartData.Count) / Convert.ToDouble(displayItemCount))) ;
            int minScrollValue = 1;

            hScrollBar.Minimum = minScrollValue;
            hScrollBar.Maximum = maxScrollValue;
            hScrollBar.Value = maxScrollValue;
            hScrollBar.LargeChange = 1;
            hScrollBar.SmallChange = 1;
        }

        public void SetTrackBar()
        {
            pnlScroll.Visible = IsAutoScrollX;
            int maxScrollValue = (int)Math.Ceiling((Convert.ToDouble(ChartData.Count) / Convert.ToDouble(MaximumDisplayItemCount)));
            int minScrollValue = 1;

            trackBar.Minimum = minScrollValue;
            trackBar.Maximum = maxScrollValue;
            trackBar.Value = minScrollValue;
            trackBar.LargeChange = 1;
            trackBar.SmallChange = 1;
        }

        public void DisplayView()
        {
            chart.Update();

            int scrollVal = hScrollBar.Value;
            if (scrollVal < hScrollBar.Minimum) scrollVal = hScrollBar.Minimum;
            if (scrollVal > hScrollBar.Maximum) scrollVal = hScrollBar.Maximum;

            int trackView = trackBar.Value;
            int displayItemCount = MaximumDisplayItemCount * trackView;

            List<T_WuXingItemData> viewLists = null;
            int maxDisplayIndex = 0;
            int minDisplayIndex = 0;
            if (scrollVal == hScrollBar.Minimum)
            {
                int maxIndex = ChartData.Count > displayItemCount ? displayItemCount - 1 : ChartData.Count;
                viewLists = ChartData.GetRange(0, maxIndex);
                maxDisplayIndex = displayItemCount;
                minDisplayIndex = 0;
            }
            else if (scrollVal == hScrollBar.Maximum)
            {
                int minIndex = ChartData.Count < displayItemCount ? 0 : ChartData.Count - displayItemCount;
                if (displayItemCount > ChartData.Count) displayItemCount = ChartData.Count;
                viewLists = ChartData.GetRange(minIndex, displayItemCount);
                maxDisplayIndex = ChartData.Count;
                minDisplayIndex = minIndex;
            }
            else
            {
                int currentIndex = (scrollVal - 1) * displayItemCount;
                if (ChartData.Count < currentIndex + displayItemCount)
                    displayItemCount = ChartData.Count - currentIndex;

                viewLists = ChartData.GetRange(currentIndex, displayItemCount);

                maxDisplayIndex = currentIndex + displayItemCount;
                minDisplayIndex = currentIndex;
            }
            if (viewLists != null)
            {
                chart.ChartAreas[0].AxisX.Maximum = maxDisplayIndex + 1;
                chart.ChartAreas[0].AxisX.Minimum = minDisplayIndex - 1;

                double maxPrice = viewLists.Max(m => m.HighPrice);
                double minPrice = viewLists.Min(m => m.LowPrice);
                maxPrice = maxPrice + (maxPrice * SpaceMaxMin);
                minPrice = minPrice - (minPrice * SpaceMaxMin);
                chart.ChartAreas[0].AxisY2.Maximum = maxPrice;
                chart.ChartAreas[0].AxisY2.Minimum = minPrice;              
            }
        }

        private void hScrollBar_ValueChanged(object sender, EventArgs e)
        {
            if (!IsLoaded) return;
            DisplayView();
            if (ChartEventInstance != null)
                ChartEventInstance.OnChangeChartScrollBarHandler(this.chart, hScrollBar.Value);
        }

        private void trackBar_ValueChanged(object sender, EventArgs e)
        {
            if (!IsLoaded) return;
            SelectedTrackBarValue = (int)trackBar.Value;
            SetScrollBar();
            DisplayView();
            if (ChartEventInstance != null)
                ChartEventInstance.OnChangeChartTrackBarHandler(this.chart, trackBar.Value);
        }


        private void chart_PostPaint(object sender, ChartPaintEventArgs e)
        {
            DrawChartTitle(e);
        }
        
        #region Chart Util
        private void SetDataPointColor(
                DataPoint dataPoint
            ,   Color? headlegColor = null
            ,   Color? bodyLineColor = null
            ,   Color? bodyColor = null
            ,   int? borderWidth = null)
        {
            if(headlegColor != null)  dataPoint.Color = headlegColor.Value;

            if (bodyLineColor != null) dataPoint.BorderColor = bodyLineColor.Value;

            if (bodyColor != null) dataPoint.SetCustomProperty("PriceUpColor", bodyColor.Value.Name);
            if (bodyColor != null) dataPoint.SetCustomProperty("PriceDownColor", bodyColor.Value.Name);

            if (borderWidth  != null) dataPoint.BorderWidth = borderWidth.Value;
        }
        #endregion
    }
}
